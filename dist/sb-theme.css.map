{"version":3,"sourceRoot":"","sources":["file:///home/severin/gitrepo/Severin/SbTheme/scss/variables/_font.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/functions/_text-color.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_typography.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/components/_button.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_padding.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_border.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_transition.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/global/_global-font.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/global/_background.scss"],"names":[],"mappings":"AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBQ;ACjBR;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;ACWA;EAjCE,aFkBmB;EEjBnB,aFkBsB;;;AEkBxB;EAhCE,aFamB;EEZnB,aFcmB;;;AGrBrB;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;EACE;EACA;EACA;EACA;EDhCA,aFkBmB;EEjBnB,aFkBsB;;AGmBpB;ECtCF,cDuCsB;ECtCtB,eDsCsB;EClCtB,aDmCsB;EClCtB,gBDkCsB;EExCtB;EHUA;;AC4BE;ECtCF,cDuCsB;ECtCtB,eDsCsB;EClCtB,aDmCsB;EClCtB,gBDkCsB;EExCtB;EHUA;;AC4BE;ECtCF,cDuCsB;ECtCtB,eDsCsB;EClCtB,aDmCsB;EClCtB,gBDkCsB;EExCtB;EHUA;;AC4BE;ECtCF,cDuCsB;ECtCtB,eDsCsB;EClCtB,aDmCsB;EClCtB,gBDkCsB;EExCtB;EHUA;;AC4BE;ECtCF,cDuCsB;ECtCtB,eDsCsB;EClCtB,aDmCsB;EClCtB,gBDkCsB;EExCtB;EHUA;;ACLA;EACE,kBAHM;EAIN;EGKF;;AHFE;EACE;EACA;;AAPJ;EACE,kBAHM;EAIN;EGKF;;AHFE;EACE;EACA;;AAPJ;EACE,kBAHM;EAIN;EGKF;;AHFE;EACE;EACA;;AAPJ;EACE,kBAHM;EAIN;EGKF;;AHFE;EACE;EACA;;;AIbN;ELCE,aFkBmB;EEjBnB,aFkBsB;;;AQpBxB;AAAA;AAAA;AAUA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAfE;EACE;;;AADF;EACE;;;AADF;EACE;;;AADF;EACE;;;AAyBJ;AAAA;AAAA;AAAA;AAhBE;EACE;;;AADF;EACE;;;AADF;EACE;;;AADF;EACE","file":"dist/sb-theme.css","sourcesContent":["/*\n  Imports the following font faces from goolge fonts (https://fonts.google.com/):\n\n  - Inter (https://fonts.google.com/specimen/Inter)\n    - Thin 100\n    - Extra-light 200\n    - Light 300\n    - Regular 400\n    - Medium 500\n    - Semi-bold 600\n    - Bold 700\n    - Extra-bold 800\n    - Black 900\n\n  - Abril Fatface (https://fonts.google.com/specimen/Abril+Fatface)\n    - Regular 400\n*/\n@import url('https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n\n$--fontface-default: 'Inter', sans-serif;\n$--font-weight-regular: 400;\n$--font-weight-bold: 600;\n\n$--font-size-s: 0.75rem;\n$--font-size-d: 1.05rem;\n$--font-size-m: 1.25rem;\n$--font-size-l: 2rem;\n$--font-size-xl: 5rem;\n\n$font-sizes: (\n  \"s\": $--font-size-s,\n  \"d\": $--font-size-d,\n  \"m\": $--font-size-m,\n  \"l\": $--font-size-l,\n  \"xl\": $--font-size-xl,\n)\n","/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n@function luminance($color) {\n  $red: nth($linear-channel-values, red($color) + 1);\n  $green: nth($linear-channel-values, green($color) + 1);\n  $blue: nth($linear-channel-values, blue($color) + 1);\n\n  @return .2126 * $red + .7152 * $green + .0722 * $blue;\n}\n\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n@function contrast($back, $front) {\n  $backLum: luminance($back) + .05;\n  $foreLum: luminance($front) + .05;\n\n  @return max($backLum, $foreLum) / min($backLum, $foreLum);\n}\n\n/**\n * Determine whether to use dark or light text on top of given color.\n * Returns black for dark text and white for light text.\n */\n@function choose-contrast-color($color) {\n  $lightContrast: contrast($color, white);\n  $darkContrast: contrast($color, black);\n\n  @if ($lightContrast > $darkContrast) {\n    @return white;\n  }\n  @else {\n    @return black;\n  }\n}\n","@mixin font-default-regular {\n  font-family: $--fontface-default;\n  font-weight: $--font-weight-regular;\n}\n\n@mixin font-default-bold {\n  font-family: $--fontface-default;\n  font-weight: $--font-weight-bold;\n}\n\n@mixin font-size($size) {\n  font-size: map-get($font-sizes, $size);\n}\n\n@mixin font-size-s{\n  font-size: $--font-size-s;\n}\n\n@mixin font-size-d {\n  font-size: $--font-size-d;\n}\n\n@mixin font-size-m {\n  font-size: $--font-size-m;\n}\n\n@mixin font-size-l{\n  font-size: $--font-size-l;\n}\n\n@mixin font-size-xl {\n  font-size: $--font-size-xl;\n}\n\n.font-regular {\n  @include font-default-regular;\n}\n\n.font-bold {\n  @include font-default-bold;\n}\n","/*\n  Adds hover to a button-color-class. On hover, the color gets darker by 10%.\n*/\n@mixin buttonPersistentColorHover($color-name) {\n  $color: getColor($color-name);\n  @debug \"-> .btn--#{$color-name}\";\n  &.btn--#{$color-name} {\n    background-color: $color;\n    color: choose-contrast-color($color);\n    @include ease(300ms);\n\n    &:hover {\n      background-color: darken($color, 10%);\n      color: choose-contrast-color(darken($color, 10%));\n    }\n  }\n}\n\n\n/*\n  Defines the default button class with all its sizes. The sizes:\n  - s\n  - m\n  - l\n  - xl\n  mean, that the padding of the button is bigger or smaller. The size\n  definitions can be found in the variables folder \"_spacing.scss\".\n*/\n@debug \"Create button-class: .btn\";\n.btn {\n  color: white;\n  border: 0;\n  outline: 0;\n  cursor: pointer;\n  @include font-default-regular;\n\n  @debug \"Create button-size-classes:\";\n  @each $size in map-keys($spacings) {\n    @debug \"-> .btn-#{$size}\";\n    &.btn--#{$size} {\n      @include paddingX(map-get($spacings, $size));\n      @include paddingY(map-get($spacings, $size)/2);\n      @include border-radius($size);\n      @include font-size($size);\n    }\n  }\n\n  @debug \"Create button-persistent-color-classes:\";\n  @each $color-name in $persistent-color-names {\n    @include buttonPersistentColorHover($color-name);\n  }\n}\n","@mixin paddingX($padding) {\n  padding-left: $padding;\n  padding-right: $padding;\n}\n\n@mixin paddingY($padding) {\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n","@mixin border-radius($size) {\n  border-radius: radius($size);\n}\n\n@mixin border-radius-half($size) {\n  border-radius: radius-half($size);\n}\n","@mixin easeInOut($time) {\n  transition: all $time ease-in-out;\n}\n\n@mixin easeIn($time) {\n  transition: all $time ease-in;\n}\n\n@mixin easeOut($time) {\n  transition: all $time ease-in;\n}\n\n@mixin ease($time) {\n  transition: all $time ease;\n}\n\n@mixin linear($time) {\n  transition: all $time linear;\n}\n","body, html {\n  @include font-default-regular;\n}\n","/*\n  Adds background-theme-color-class.\n*/\n@mixin themeBackground($theme-name, $theme-color-name) {\n  @debug \"-> .bg-#{$theme-name}-#{$theme-color-name}\";\n  .bg-#{$theme-name}-#{$theme-color-name} {\n    background: getThemeColor($theme-name, $theme-color-name);\n  }\n}\n\n/*\n  Adds background-persistent-color-class.\n*/\n@mixin background($color-name) {\n  @debug \"-> .bg-#{$color-name}\";\n  .bg-#{$color-name} {\n    background: getColor($color-name);\n  }\n}\n\n/*\n  Includes all themes and creates a background-theme-color-class for each color\n  in each theme.\n*/\n@debug \"Create background-theme-color-classes:\";\n@each $theme-name in $theme-names {\n  @each $theme-color-name in $theme-color-names {\n    @include themeBackground($theme-name, $theme-color-name);\n  }\n}\n\n/*\n  Includes all persistent colors and creates a background-color-class for each\n  of these colors.\n*/\n@debug \"Create background-persistent-color-classes:\";\n@each $color-name in $persistent-color-names {\n  @include background($color-name);\n}\n"]}