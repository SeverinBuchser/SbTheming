{"version":3,"sourceRoot":"","sources":["file:///home/severin/gitrepo/Severin/SbTheme/scss/functions/_text-color.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/components/_button.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_padding.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_border.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/variables/_themes.scss","file:///home/severin/gitrepo/Severin/SbTheme/scss/mixins/_transition.scss"],"names":[],"mappings":"AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;ACvBA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAQA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;EACE;EACA;EACA;;AAKE;EC1DF,cD2DsB;EC1DtB,eD0DsB;ECtDtB,aDuDsB;ECtDtB,gBDsDsB;EE5DtB;;AF0DE;EC1DF,cD2DsB;EC1DtB,eD0DsB;ECtDtB,aDuDsB;ECtDtB,gBDsDsB;EE5DtB;;AF0DE;EC1DF,cD2DsB;EC1DtB,eD0DsB;ECtDtB,aDuDsB;ECtDtB,gBDsDsB;EE5DtB;;AF0DE;EC1DF,cD2DsB;EC1DtB,eD0DsB;ECtDtB,aDuDsB;ECtDtB,gBDsDsB;EE5DtB;;AF0BA;EACE,kBG3BM;EH4BN;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;AARJ;EACE,kBG1BG;EH2BH;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;;AAoCN;AAAA;AAAA;AA5CE;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;AARJ;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;;AARJ;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;AARJ;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;;AARJ;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb;;AARJ;EACE,kBAVqC;EAWrC;EIhBF;;AJmBE;EAEE,kBADa;EAEb","file":"dist/sb-theme.css","sourcesContent":["/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n@function luminance($color) {\n  $red: nth($linear-channel-values, red($color) + 1);\n  $green: nth($linear-channel-values, green($color) + 1);\n  $blue: nth($linear-channel-values, blue($color) + 1);\n\n  @return .2126 * $red + .7152 * $green + .0722 * $blue;\n}\n\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n@function contrast($back, $front) {\n  $backLum: luminance($back) + .05;\n  $foreLum: luminance($front) + .05;\n\n  @return max($backLum, $foreLum) / min($backLum, $foreLum);\n}\n\n/**\n * Determine whether to use dark or light text on top of given color.\n * Returns black for dark text and white for light text.\n */\n@function choose-contrast-color($color) {\n  $lightContrast: contrast($color, white);\n  $darkContrast: contrast($color, black);\n\n  @if ($lightContrast > $darkContrast) {\n    @return white;\n  }\n  @else {\n    @return black;\n  }\n}\n","/*\n  Creates a button-theme-class for a specific theme. The class defines colors,\n  beloging to the theme.\n*/\n@mixin buttonTheme($theme-name) {\n  @debug \"Create button-theme-classes: #{$theme-name}\";\n  @debug \".btn.#{$theme-name}\";\n  .btn.#{$theme-name} {\n    @include buttonThemeHover($theme-name, 'primary');\n    @include buttonThemeHover($theme-name, 'secondary');\n  }\n}\n\n\n/*\n  Adds hover to a theme-button-color-class.\n*/\n@mixin buttonThemeHover($theme-name, $color-name) {\n  @include buttonColorHover($color-name, get-theme($theme-name, $color-name));\n}\n\n\n/*\n  Adds hover to a button-color-class. On hover, the color gets darker by 10%.\n*/\n@mixin buttonColorHover($color-name, $color) {\n  @debug \"-> .btn--#{$color-name}\";\n  &.btn--#{$color-name} {\n    background-color: $color;\n    color: choose-contrast-color($color);\n    @include ease(300ms);\n\n    &:hover {\n      $temp-color: invert($color);\n      background-color: $temp-color;\n      color: choose-contrast-color($temp-color);\n    }\n  }\n}\n\n\n/*\n  Defines the default button class with all its sizes. The sizes:\n  - s\n  - m\n  - l\n  - xl\n  mean, that the padding of the button is bigger or smaller. The size\n  definitions can be found in the variables folder \"_spacing.scss\".\n*/\n@debug \"Create button-class: .btn\";\n.btn {\n  color: white;\n  border: 0;\n  outline: 0;\n\n  @debug \"Create button-size-classes:\";\n  @each $size in map-keys($spacings) {\n    @debug \"-> .btn-#{$size}\";\n    &.btn-#{$size} {\n      @include paddingX(map-get($spacings, $size));\n      @include paddingY(map-get($spacings, $size)/2);\n      @include border-radius($size);\n    }\n  }\n  @debug \"Create button-standard-color-classes:\";\n  @include buttonColorHover('success', $success);\n  @include buttonColorHover('warn', $warn);\n}\n\n\n/*\n  Include every theme of the button-theme-class.\n*/\n@each $theme-name in $theme-names {\n  @include buttonTheme($theme-name);\n}\n","@mixin paddingX($padding) {\n  padding-left: $padding;\n  padding-right: $padding;\n}\n\n@mixin paddingY($padding) {\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n","@mixin border-radius($size) {\n  border-radius: radius($size);\n}\n\n@mixin border-radius-half($size) {\n  border-radius: radius-half($size);\n}\n","// consistant theme colors\n$success: #00B74A;\n$warn: #D7263D;\n\n// theme indian red\n$indian-red-primary: #DB5461;\n$indian-red-secondary: #3D5467;\n$indian-red-dark: #270722;\n$indian-red-bright: #FFFFFF;\n\n// theme celadon blue\n$celadon-blue-primary: #2978A0;\n$celadon-blue-secondary: #FFC857;\n$celadon-blue-dark: #02182B;\n$celadon-blue-bright: #FFFFFF;\n\n// theme cornflower blue\n$cornflower-blue-primary: #8E94F2;\n$cornflower-blue-secondary: #B47AEA;\n$cornflower-blue-dark: #272727;\n$cornflower-blue-bright: #FFFFFF;\n\n$themes: (\n  \"indian-red\": (\n    \"primary\": $indian-red-primary,\n    \"secondary\": $indian-red-secondary,\n    \"dark\": $indian-red-dark,\n    \"bright\": $indian-red-bright\n  ),\n  \"celadon-blue\": (\n    \"primary\": $celadon-blue-primary,\n    \"secondary\": $celadon-blue-secondary,\n    \"dark\": $celadon-blue-dark,\n    \"bright\": $celadon-blue-bright\n  ),\n  \"cornflower-blue\": (\n    \"primary\": $cornflower-blue-primary,\n    \"secondary\": $cornflower-blue-secondary,\n    \"dark\": $cornflower-blue-dark,\n    \"bright\": $cornflower-blue-bright\n  )\n);\n\n$theme-names: map-keys($themes);\n","@mixin easeInOut($time) {\n  transition: all $time ease-in-out;\n}\n\n@mixin easeIn($time) {\n  transition: all $time ease-in;\n}\n\n@mixin easeOut($time) {\n  transition: all $time ease-in;\n}\n\n@mixin ease($time) {\n  transition: all $time ease;\n}\n\n@mixin linear($time) {\n  transition: all $time linear;\n}\n"]}