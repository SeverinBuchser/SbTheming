/*****************************************************************************
                              Checkbox - Classes
******************************************************************************/

/*
  Adds different colors to a checkbox. The coloring is based on the two states
  of the checkbos: 'checked' and 'unchecked'. The two states have to be set
  dynamically.

  Attributes:
  - theme: 'light', 'night'
  - color: 'warn', 'success', 'info', 'primary', 'secondary'

  OPTION '.checkbox--[theme]-[color]' for ROOT '.sb-checkbox'
*/
@mixin checkbox-color-class($theme, $color) {
  &.checkbox--#{$theme}-#{$color} {
    .sb-checkbox__checkbox-wrapper .sb-checkbox__checkbox {
      border-color: getBackgroundColor($color);
    }
    &.is-checked {
      .sb-checkbox__checkbox-wrapper .sb-checkbox__checkbox {
        background: getBackgroundColor($color);
        .sb-checkbox__tick .sb-icon {
          color: getThemeTextColorForBackground($theme, $color);
        }
      }
    }
  }
}

/*
  Adds different sizes to a checkbox. The sizes concern widht, height and
  border-radius.

  Attributes:
  - size: 's', 'd', 'm', 'l'

  OPTION '.checkbox--[size]' for ROOT '.sb-checkbox'
*/
@mixin checkbox-size-class($form-height) {
  $height: map-get($form-heights, $form-height);

  &.checkbox--#{$form-height} {
    .sb-checkbox__checkbox-wrapper .sb-checkbox__checkbox {
      height: $height;
      width: $height;
      border-radius: $height / 3;

      .sb-checkbox__tick {
        .sb-icon {
          font-size: $height / 5 * 4;
        }
      }
    }
  }
}

/*
  Creates class for a checkbox. The class defines colors and sizes for The
  checkbox and the tick.

  Attributes:
  - NONE

  ROOT .sb-checkbox
*/
.sb-checkbox {
  display: grid;
  grid-template-columns: auto auto;
  grid-gap: $spacing-s;

  .sb-checkbox__label {
    display: none;
  }

  &.is-label {
    .sb-checkbox__label {
      display: block;
      span {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
      }
    }

    &.label-is-right {
      .sb-checkbox__label {
        grid-column: 2 / 3;
        grid-row: 1 / 2;
      }
      .sb-checkbox__checkbox-wrapper {
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }
    }

    &.label-is-left {
      .sb-checkbox__label {
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }
      .sb-checkbox__checkbox-wrapper {
        grid-column: 2 / 3;
        grid-row: 1 / 2;
      }
    }

    &.label-is-top {
      grid-template-columns: auto;
      .sb-checkbox__label {
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }
      .sb-checkbox__checkbox-wrapper {
        grid-column: 1 / 2;
        grid-row: 2 / 3;
      }
    }

    &.label-is-bottom {
      grid-template-columns: auto;
      .sb-checkbox__label {
        grid-column: 1 / 2;
        grid-row: 2 / 3;
      }
      .sb-checkbox__checkbox-wrapper {
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }
    }
  }

  .sb-checkbox__checkbox-wrapper .sb-checkbox__checkbox {
    box-sizing: border-box;
    border: 2px solid;
    cursor: pointer;
    @include ease(300ms);

    .sb-checkbox__tick {
      height: 100%;
      width: 100%;
      .sb-icon {
        height: 100%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        @include ease(300ms);
      }
    }
  }


  &.is-unchecked {
    .sb-checkbox__checkbox-wrapper .sb-checkbox__checkbox {
      .sb-checkbox__tick .sb-icon {
        color: transparent;
      }
    }
  }

  &.disabled {
    cursor: not-allowed;
  }


  @each $theme in $theme-names {
    @each $color in $color-names {
      @include checkbox-color-class($theme, $color);
    }
  }

  @each $form-height in map-keys($form-heights) {
    @include checkbox-size-class($form-height);
  }
}
